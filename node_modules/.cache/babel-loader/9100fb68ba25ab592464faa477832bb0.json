{"ast":null,"code":"var _jsxFileName = \"/Users/pedronunes/Desktop/react/reddit_client/my-app/src/features/main/posts/postsList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport './postsList.css';\nimport { getSubredditPosts, getPostComments } from '../../../app/API/Reddit';\nimport { selectSubReddit } from '../subReddits/subRedditsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { addPosts } from './postsSlice';\nimport { selectPosts } from './postsSlice';\nimport { selectSearchTerm } from '../../header/searchBar/searchSlice';\nimport { dateCalculator } from '../../utilities/utils';\nimport { Comments } from '../comments/comments';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PostsList() {\n  _s();\n\n  const posts = useSelector(selectPosts);\n  const activeSubReddit = useSelector(selectSubReddit);\n  const searchTerm = useSelector(selectSearchTerm);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    getSubredditPosts(activeSubReddit).then(jsonData => {\n      //console.log(jsonData);\n      dispatch(addPosts(jsonData));\n    });\n  }, [activeSubReddit, dispatch]);\n  const filteredPosts = posts.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  function handleImgError({\n    target\n  }) {\n    target.style.display = \"none\";\n  }\n\n  ; // console.log(filteredPosts);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"postsItem\",\n    children: filteredPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"singlePost\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/Post\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.selftext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: post.url,\n          alt: \"\",\n          onError: handleImgError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          width: \"100%\",\n          controls: true,\n          style: post.media ? {\n            display: \"block\"\n          } : {\n            display: \"none\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: post.media ? post.media.reddit_video.fallback_url : \"\",\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this), \"Your browser doesn't support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: !post.media && post.url ? post.url : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postFoot\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"By: \", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: dateCalculator(post.created_utc)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"far fa-comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this), \" \", post.num_comments]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postScore\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"far fa-arrow-alt-circle-up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.score\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"far fa-arrow-alt-circle-down\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Comments, {\n        permalink: post.permalink\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PostsList, \"iEhtBssxwTYvxTvXCgaB6LSJczo=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = PostsList;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"sources":["/Users/pedronunes/Desktop/react/reddit_client/my-app/src/features/main/posts/postsList.js"],"names":["React","Link","getSubredditPosts","getPostComments","selectSubReddit","useDispatch","useSelector","useEffect","addPosts","selectPosts","selectSearchTerm","dateCalculator","Comments","PostsList","posts","activeSubReddit","searchTerm","dispatch","then","jsonData","filteredPosts","filter","post","title","toLowerCase","includes","handleImgError","target","style","display","map","selftext","url","media","reddit_video","fallback_url","author","created_utc","num_comments","score","permalink","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './postsList.css'\nimport { getSubredditPosts, getPostComments } from '../../../app/API/Reddit';\nimport { selectSubReddit } from '../subReddits/subRedditsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { addPosts } from './postsSlice';\nimport { selectPosts } from './postsSlice'; \nimport { selectSearchTerm } from '../../header/searchBar/searchSlice';\nimport { dateCalculator } from '../../utilities/utils';\n\nimport { Comments } from '../comments/comments';\n\n\n\nexport function PostsList() {\n    \n    const posts = useSelector(selectPosts);\n    const activeSubReddit = useSelector(selectSubReddit);\n    const searchTerm = useSelector(selectSearchTerm);\n    const dispatch = useDispatch();\n\n    \n\n    useEffect( () => {\n        getSubredditPosts(activeSubReddit)\n        .then( jsonData => {\n            //console.log(jsonData);\n            dispatch(addPosts(jsonData))\n        });\n    }, [activeSubReddit, dispatch]); \n\n    const filteredPosts = posts.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    function handleImgError({target}) {\n        target.style.display = \"none\";\n    };\n\n    // console.log(filteredPosts);\n    return (\n        <div id=\"postsItem\">\n            {filteredPosts.map( post => (\n                <div className=\"singlePost\" key={post.id}>\n                    <Link to=\"/Post\">\n                        <h1>{post.title}</h1>\n                        <p>{post.selftext}</p>\n                        <img src={post.url} alt=\"\" onError={handleImgError}/>\n                        <video width=\"100%\" controls style={(post.media)? {display: \"block\"} : {display: \"none\"}}>\n                            <source src={post.media ? post.media.reddit_video.fallback_url : \"\"} type=\"video/mp4\"></source>\n                            Your browser doesn't support the video tag.\n                        </video>\n                        <p>{!post.media && post.url ? post.url : \"\"}</p>\n                    </Link>\n                    <div className=\"postFoot\">\n                        <p>By: {post.author}</p>\n                        <p>{dateCalculator(post.created_utc)}</p>\n                        <p>\n                            <i className=\"far fa-comments\"></i> {post.num_comments}\n                        </p>\n                        <div className=\"postScore\">\n                            <i className=\"far fa-arrow-alt-circle-up\"></i>\n                            <p>{post.score}</p>\n                            <i className=\"far fa-arrow-alt-circle-down\"></i>\n                        </div>\n                    </div>\n                    <Comments permalink={post.permalink}/>\n                </div>)\n            )}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}