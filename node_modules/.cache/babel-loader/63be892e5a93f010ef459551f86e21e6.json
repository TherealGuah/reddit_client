{"ast":null,"code":"var _jsxFileName = \"/Users/pedronunes/Desktop/react/reddit_client/my-app/src/features/main/posts/post/post.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { selectPost } from './postSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectSubReddit } from '../../subReddits/subRedditsSlice';\nimport { selectPosts } from '../postsSlice';\nimport { Video } from '../video/video';\nimport { Footer } from '../footer/footer';\nimport styles from './post.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Post = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const postId = useSelector(selectPost);\n  const selectedSubReddit = useSelector(selectSubReddit);\n  const posts = useSelector(selectPosts);\n  const selectedPost = posts.filter(post => post.name === postId);\n  console.log(selectedPost);\n\n  function handleImgError({\n    target\n  }) {\n    target.style.display = \"none\";\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: styles.postsItem,\n    children: selectedPost.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.singlePost,\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: [\"Back to \", selectedSubReddit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.selftext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.url,\n        alt: \"\",\n        onError: handleImgError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: post.media ? styles.video : styles.noVideo,\n        children: /*#__PURE__*/_jsxDEV(Video, {\n          postMedia: post.media,\n          postUrl: post.url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        postId: post.id,\n        postAuthor: post.author,\n        postCreated: post.created_utc,\n        postPermalink: post.permalink,\n        postComments: post.num_comments,\n        visible: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Post, \"xQDBuGlAlrbJWMxX8wTFY9MJVAU=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/pedronunes/Desktop/react/reddit_client/my-app/src/features/main/posts/post/post.js"],"names":["React","Link","selectPost","useDispatch","useSelector","selectSubReddit","selectPosts","Video","Footer","styles","Post","dispatch","postId","selectedSubReddit","posts","selectedPost","filter","post","name","console","log","handleImgError","target","style","display","postsItem","map","singlePost","title","selftext","url","media","video","noVideo","id","author","created_utc","permalink","num_comments"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,eAAT,QAAiC,kCAAjC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACtB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,MAAM,GAAGR,WAAW,CAACF,UAAD,CAA1B;AACA,QAAMW,iBAAiB,GAAGT,WAAW,CAACC,eAAD,CAArC;AACA,QAAMS,KAAK,GAAGV,WAAW,CAACE,WAAD,CAAzB;AAEA,QAAMS,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcN,MAAnC,CAArB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;;AAEA,WAASM,cAAT,CAAwB;AAACC,IAAAA;AAAD,GAAxB,EAAkC;AAC9BA,IAAAA,MAAM,CAACC,KAAP,CAAaC,OAAb,GAAuB,MAAvB;AACH;;AAAA;AAED,sBACI;AAAS,IAAA,EAAE,EAAEf,MAAM,CAACgB,SAApB;AAAA,cACKV,YAAY,CAACW,GAAb,CAAkBT,IAAI,iBACnB;AAAK,MAAA,SAAS,EAAER,MAAM,CAACkB,UAAvB;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAA,+BACI;AAAA,iCAAiBd,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAA,kBAAKI,IAAI,CAACW;AAAV;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA,kBAAIX,IAAI,CAACY;AAAT;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAK,QAAA,GAAG,EAAEZ,IAAI,CAACa,GAAf;AAAoB,QAAA,GAAG,EAAC,EAAxB;AAA2B,QAAA,OAAO,EAAET;AAApC;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAK,QAAA,SAAS,EAAEJ,IAAI,CAACc,KAAL,GAAatB,MAAM,CAACuB,KAApB,GAA4BvB,MAAM,CAACwB,OAAnD;AAAA,+BACI,QAAC,KAAD;AAAO,UAAA,SAAS,EAAEhB,IAAI,CAACc,KAAvB;AAA8B,UAAA,OAAO,EAAEd,IAAI,CAACa;AAA5C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAPJ,eAWI,QAAC,MAAD;AACI,QAAA,MAAM,EAAGb,IAAI,CAACiB,EADlB;AAEI,QAAA,UAAU,EAAEjB,IAAI,CAACkB,MAFrB;AAGI,QAAA,WAAW,EAAElB,IAAI,CAACmB,WAHtB;AAII,QAAA,aAAa,EAAEnB,IAAI,CAACoB,SAJxB;AAKI,QAAA,YAAY,EAAEpB,IAAI,CAACqB,YALvB;AAMI,QAAA,OAAO,EAAE;AANb;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA,OAAwCrB,IAAI,CAACiB,EAA7C;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AA6BH,CA1CM;;GAAMxB,I;UACQP,W,EACFC,W,EACWA,W,EACZA,W;;;KAJLM,I","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { selectPost } from './postSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectSubReddit } from  '../../subReddits/subRedditsSlice';\nimport { selectPosts } from '../postsSlice';\nimport { Video}  from '../video/video';\nimport { Footer } from '../footer/footer';\nimport styles from './post.module.css';\n\nexport const Post = () => {\n    const dispatch = useDispatch();\n    const postId = useSelector(selectPost);\n    const selectedSubReddit = useSelector(selectSubReddit);\n    const posts = useSelector(selectPosts);\n    \n    const selectedPost = posts.filter(post => post.name === postId)\n    console.log(selectedPost);\n    \n    function handleImgError({target}) {\n        target.style.display = \"none\";\n    };\n\n    return (\n        <section id={styles.postsItem}>\n            {selectedPost.map( post => (\n                <div className={styles.singlePost} key={post.id}>\n                    <Link to=\"/\">\n                        <button>Back to {selectedSubReddit}</button>\n                    </Link>\n                    <h1>{post.title}</h1>\n                    <p>{post.selftext}</p>\n                    <img src={post.url} alt=\"\" onError={handleImgError}/>\n                    <div className={post.media ? styles.video : styles.noVideo}>\n                        <Video postMedia={post.media} postUrl={post.url}/>\n                    </div>\n                    \n                    <Footer\n                        postId ={post.id}\n                        postAuthor={post.author}\n                        postCreated={post.created_utc}\n                        postPermalink={post.permalink}\n                        postComments={post.num_comments}\n                        visible={false}\n                    />\n                </div>)\n            )}\n        </section>\n    );\n\n\n\n};\n"]},"metadata":{},"sourceType":"module"}