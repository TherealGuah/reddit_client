{"ast":null,"code":"var _jsxFileName = \"/Users/pedronunes/Desktop/react/reddit_client/my-app/src/features/main/posts/postsList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './postsList.module.css';\nimport { getSubredditPosts } from '../../../app/API/Reddit';\nimport { selectSubReddit } from '../subReddits/subRedditsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { addPosts } from './postsSlice';\nimport { selectPosts } from './postsSlice';\nimport { selectSearchTerm } from '../../header/searchBar/searchSlice';\nimport { Footer } from \"./footer/footer\";\nimport { Video } from './video/video';\nimport { changeActivePostId } from './post/postSlice';\nimport subStyles from '../subReddits/subReddits.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PostsList() {\n  _s();\n\n  const posts = useSelector(selectPosts);\n  const activeSubReddit = useSelector(selectSubReddit);\n  const searchTerm = useSelector(selectSearchTerm);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    getSubredditPosts(activeSubReddit).then(jsonData => {\n      //console.log(jsonData);\n      dispatch(addPosts(jsonData));\n    });\n  }, [activeSubReddit, dispatch]);\n  const filteredPosts = posts.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  function handleImgError({\n    target\n  }) {\n    target.style.display = \"none\";\n  }\n\n  ;\n  console.log(filteredPosts);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: styles.postsItem,\n    children: filteredPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.singlePost,\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/Post\",\n        onClick: () => {\n          dispatch(changeActivePostId(post.name));\n          const subReddits = document.getElementById(subStyles.subReddits);\n          console.log(subReddits);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.selftext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: post.url,\n          alt: \"\",\n          onError: handleImgError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: post.media ? styles.video : styles.noVideo,\n          children: /*#__PURE__*/_jsxDEV(Video, {\n            postMedia: post.media,\n            postUrl: post.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: !post.media && post.url ? post.url : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        postId: post.id,\n        postAuthor: post.author,\n        postCreated: post.created_utc,\n        postPermalink: post.permalink,\n        postComments: post.num_comments,\n        visible: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PostsList, \"iEhtBssxwTYvxTvXCgaB6LSJczo=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = PostsList;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"sources":["/Users/pedronunes/Desktop/react/reddit_client/my-app/src/features/main/posts/postsList.js"],"names":["React","Link","styles","getSubredditPosts","selectSubReddit","useDispatch","useSelector","useEffect","addPosts","selectPosts","selectSearchTerm","Footer","Video","changeActivePostId","subStyles","PostsList","posts","activeSubReddit","searchTerm","dispatch","then","jsonData","filteredPosts","filter","post","title","toLowerCase","includes","handleImgError","target","style","display","console","log","postsItem","map","singlePost","name","subReddits","document","getElementById","selftext","url","media","video","noVideo","id","author","created_utc","permalink","num_comments"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './postsList.module.css'\nimport { getSubredditPosts } from '../../../app/API/Reddit';\nimport { selectSubReddit } from '../subReddits/subRedditsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect} from 'react';\nimport { addPosts } from './postsSlice';\nimport { selectPosts } from './postsSlice'; \nimport { selectSearchTerm } from '../../header/searchBar/searchSlice';\nimport { Footer } from \"./footer/footer\";\nimport { Video } from './video/video';\nimport { changeActivePostId } from './post/postSlice';\nimport subStyles from '../subReddits/subReddits.module.css';\n\n\nexport function PostsList() {\n    \n    const posts = useSelector(selectPosts);\n    const activeSubReddit = useSelector(selectSubReddit);\n    const searchTerm = useSelector(selectSearchTerm);\n    const dispatch = useDispatch();\n\n    useEffect( () => {\n        getSubredditPosts(activeSubReddit)\n        .then( jsonData => {\n            //console.log(jsonData);\n            dispatch(addPosts(jsonData))\n        });\n    }, [activeSubReddit, dispatch]); \n\n    const filteredPosts = posts.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    function handleImgError({target}) {\n        target.style.display = \"none\";\n    };\n    \n    console.log(filteredPosts);\n    return (\n        <div id={styles.postsItem}>\n            {filteredPosts.map( post => (\n                <div className={styles.singlePost} key={post.id}>\n                    <Link to=\"/Post\" onClick={() => {\n                        dispatch(changeActivePostId(post.name)); \n                        const subReddits = document.getElementById(subStyles.subReddits);\n                        console.log(subReddits);\n                        }}>\n                        <h2>{post.title}</h2>\n                        <p>{post.selftext}</p>\n                        <img src={post.url} alt=\"\" onError={handleImgError}/>\n                        <div className={post.media ? styles.video : styles.noVideo}>\n                            <Video postMedia={post.media} postUrl={post.url}/>\n                        </div>\n                        <p>{!post.media && post.url ? post.url : \"\"}</p>\n                    </Link>\n                    <Footer\n                        postId ={post.id}\n                        postAuthor={post.author}\n                        postCreated={post.created_utc}\n                        postPermalink={post.permalink}\n                        postComments={post.num_comments}\n                        visible={false}\n                    />\n                </div>)\n            )}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}