{"ast":null,"code":"var _jsxFileName = \"/Users/pedronunes/Desktop/react/reddit_client/my-app/src/features/main/posts/postsList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './postsList.module.css';\nimport {\n/*getPostComments,*/\ngetSubredditPosts } from '../../../app/API/Reddit';\nimport { selectSubReddit } from '../subReddits/subRedditsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { addPosts } from './postsSlice';\nimport { selectPosts } from './postsSlice';\nimport { selectSearchTerm } from '../../header/searchBar/searchSlice';\nimport { dateCalculator } from '../../utilities/utils';\nimport { Footer } from \"./footer/footer\"; // import { Comments } from '../comments/comments';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PostsList() {\n  _s();\n\n  const [active, setActive] = useState(false);\n  const posts = useSelector(selectPosts);\n  const activeSubReddit = useSelector(selectSubReddit);\n  const searchTerm = useSelector(selectSearchTerm);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    getSubredditPosts(activeSubReddit).then(jsonData => {\n      //console.log(jsonData);\n      dispatch(addPosts(jsonData));\n    });\n  }, [activeSubReddit, dispatch]);\n  const filteredPosts = posts.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  function handleImgError({\n    target\n  }) {\n    target.style.display = \"none\";\n  }\n\n  ;\n  console.log(filteredPosts);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"postsItem\",\n    children: filteredPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.singlePost,\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/Post\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.selftext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: post.url,\n          alt: \"\",\n          onError: handleImgError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: !post.media && post.url ? post.url : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        postId: post.id,\n        postAuthor: post.author,\n        postCreated: post.created_utc,\n        postPermalink: post.permalink,\n        postComments: post.num_comments,\n        visible: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PostsList, \"kqvO9KdSRf5xaeixo6qkaBglqE0=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = PostsList;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"sources":["/Users/pedronunes/Desktop/react/reddit_client/my-app/src/features/main/posts/postsList.js"],"names":["React","Link","styles","getSubredditPosts","selectSubReddit","useDispatch","useSelector","useEffect","useState","addPosts","selectPosts","selectSearchTerm","dateCalculator","Footer","PostsList","active","setActive","posts","activeSubReddit","searchTerm","dispatch","then","jsonData","filteredPosts","filter","post","title","toLowerCase","includes","handleImgError","target","style","display","console","log","map","singlePost","selftext","url","media","id","author","created_utc","permalink","num_comments"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './postsList.module.css'\nimport { /*getPostComments,*/ getSubredditPosts } from '../../../app/API/Reddit';\nimport { selectSubReddit } from '../subReddits/subRedditsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { addPosts } from './postsSlice';\nimport { selectPosts } from './postsSlice'; \nimport { selectSearchTerm } from '../../header/searchBar/searchSlice';\nimport { dateCalculator } from '../../utilities/utils';\nimport { Footer } from \"./footer/footer\";\n// import { Comments } from '../comments/comments';\n\n\n\nexport function PostsList() {\n    const [active, setActive] = useState(false);\n    const posts = useSelector(selectPosts);\n    const activeSubReddit = useSelector(selectSubReddit);\n    const searchTerm = useSelector(selectSearchTerm);\n    const dispatch = useDispatch();\n\n    \n\n    useEffect( () => {\n        getSubredditPosts(activeSubReddit)\n        .then( jsonData => {\n            //console.log(jsonData);\n            dispatch(addPosts(jsonData))\n        });\n    }, [activeSubReddit, dispatch]); \n\n    const filteredPosts = posts.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    function handleImgError({target}) {\n        target.style.display = \"none\";\n    };\n\n    \n    console.log(filteredPosts);\n    return (\n        <div id=\"postsItem\">\n            {filteredPosts.map( post => (\n                <div className={styles.singlePost} key={post.id}>\n                    <Link to=\"/Post\">\n                        <h1>{post.title}</h1>\n                        <p>{post.selftext}</p>\n                        <img src={post.url} alt=\"\" onError={handleImgError}/>\n                        {/* <video width=\"100%\" controls style={(post.media)? {display: \"block\"} : {display: \"none\"}}>\n                            <source src={post.media ? post.media.reddit_video.fallback_url : \"\"} type=\"video/mp4\"></source>\n                            Your browser doesn't support the video tag.\n                        </video> */}\n                        <p>{!post.media && post.url ? post.url : \"\"}</p>\n                    </Link>\n                    <Footer\n                        postId ={post.id}\n                        postAuthor={post.author}\n                        postCreated={post.created_utc}\n                        postPermalink={post.permalink}\n                        postComments={post.num_comments}\n                        visible={false}\n                    />\n                </div>)\n            )}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}